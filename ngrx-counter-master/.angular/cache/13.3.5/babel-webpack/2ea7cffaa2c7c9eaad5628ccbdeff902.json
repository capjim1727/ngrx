{"ast":null,"code":"import { getPosts } from './posts.selector';\nimport { filter, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { addPost, addPostSuccess, deletePost, deletePostSuccess, loadPosts, loadPostsSuccess, updatePost, updatePostSuccess } from './posts.actions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store';\nimport { of } from 'rxjs';\nimport { dummyAction } from 'src/app/auth/state/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/posts.service\";\nimport * as i2 from \"@ngrx/store\";\nexport let PostsEffects = /*#__PURE__*/(() => {\n  class PostsEffects {\n    constructor(actions$, postsService, store) {\n      this.actions$ = actions$;\n      this.postsService = postsService;\n      this.store = store;\n      this.loadPosts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadPosts), withLatestFrom(this.store.select(getPosts)), mergeMap(([action, posts]) => {\n          if (!posts.length || posts.length === 1) {\n            return this.postsService.getPosts().pipe(map(posts => {\n              return loadPostsSuccess({\n                posts\n              });\n            }));\n          }\n\n          return of(dummyAction());\n        }));\n      });\n      this.addPost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(addPost), mergeMap(action => {\n          return this.postsService.addPost(action.post).pipe(map(data => {\n            const post = Object.assign(Object.assign({}, action.post), {\n              id: data.name\n            });\n            return addPostSuccess({\n              post\n            });\n          }));\n        }));\n      });\n      this.updatePost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(updatePost), switchMap(action => {\n          return this.postsService.updatePost(action.post).pipe(map(data => {\n            const updatedPost = {\n              id: action.post.id,\n              changes: Object.assign({}, action.post)\n            };\n            return updatePostSuccess({\n              post: updatedPost\n            });\n          }));\n        }));\n      });\n      this.deletePost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(deletePost), switchMap(action => {\n          return this.postsService.deletePost(action.id).pipe(map(data => {\n            return deletePostSuccess({\n              id: action.id\n            });\n          }));\n        }));\n      });\n      this.getSinglePost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ROUTER_NAVIGATION), filter(r => {\n          return r.payload.routerState.url.startsWith('/posts/details');\n        }), map(r => {\n          return r.payload.routerState['params']['id'];\n        }), withLatestFrom(this.store.select(getPosts)), switchMap(([id, posts]) => {\n          if (!posts.length) {\n            return this.postsService.getPostById(id).pipe(map(post => {\n              const postData = [Object.assign(Object.assign({}, post), {\n                id\n              })];\n              return loadPostsSuccess({\n                posts: postData\n              });\n            }));\n          }\n\n          return of(dummyAction());\n        }));\n      });\n    }\n\n  }\n\n  PostsEffects.ɵfac = function PostsEffects_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  PostsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsEffects,\n    factory: PostsEffects.ɵfac\n  });\n  return PostsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}