{"ast":null,"code":"import { setLoadingSpinner, setErrorMessage } from './../../store/Shared/shared.actions';\nimport { exhaustMap, map, catchError, tap, mergeMap } from 'rxjs/operators';\nimport { autoLogin, autoLogout, loginStart, loginSuccess, signupStart, signupSuccess } from './auth.actions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/auth.service\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/router\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService, store, router) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.store = store;\n      this.router = router;\n      this.login$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loginStart), exhaustMap(action => {\n          return this.authService.login(action.email, action.password).pipe(map(data => {\n            this.store.dispatch(setLoadingSpinner({\n              status: false\n            }));\n            this.store.dispatch(setErrorMessage({\n              message: ''\n            }));\n            const user = this.authService.formatUser(data);\n            this.authService.setUserInLocalStorage(user);\n            return loginSuccess({\n              user,\n              redirect: true\n            });\n          }), catchError(errResp => {\n            this.store.dispatch(setLoadingSpinner({\n              status: false\n            }));\n            const errorMessage = this.authService.getErrorMessage(errResp.error.error.message);\n            return of(setErrorMessage({\n              message: errorMessage\n            }));\n          }));\n        }));\n      });\n      this.loginRedirect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(...[loginSuccess, signupSuccess]), tap(action => {\n          this.store.dispatch(setErrorMessage({\n            message: ''\n          }));\n\n          if (action.redirect) {\n            this.router.navigate(['/']);\n          }\n        }));\n      }, {\n        dispatch: false\n      });\n      this.signUp$ = createEffect(() => {\n        return this.actions$.pipe(ofType(signupStart), exhaustMap(action => {\n          return this.authService.signUp(action.email, action.password).pipe(map(data => {\n            this.store.dispatch(setLoadingSpinner({\n              status: false\n            }));\n            const user = this.authService.formatUser(data);\n            this.authService.setUserInLocalStorage(user);\n            return signupSuccess({\n              user,\n              redirect: true\n            });\n          }), catchError(errResp => {\n            this.store.dispatch(setLoadingSpinner({\n              status: false\n            }));\n            const errorMessage = this.authService.getErrorMessage(errResp.error.error.message);\n            return of(setErrorMessage({\n              message: errorMessage\n            }));\n          }));\n        }));\n      });\n      this.autoLogin$ = createEffect(() => {\n        return this.actions$.pipe(ofType(autoLogin), mergeMap(action => {\n          const user = this.authService.getUserFromLocalStorage();\n          return of(loginSuccess({\n            user,\n            redirect: false\n          }));\n        }));\n      });\n      this.logout$ = createEffect(() => {\n        return this.actions$.pipe(ofType(autoLogout), map(action => {\n          this.authService.logout();\n          this.router.navigate(['auth']);\n        }));\n      }, {\n        dispatch: false\n      });\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}