{"ast":null,"code":"import { User } from './../models/user.model';\nimport { environment } from './../../environments/environment';\nimport { autoLogout } from '../auth/state/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, store) {\n      this.http = http;\n      this.store = store;\n    }\n\n    login(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.FIRBASE_API_KEY}`, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n    }\n\n    signUp(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.FIRBASE_API_KEY}`, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n    }\n\n    formatUser(data) {\n      const expirationDate = new Date(new Date().getTime() + +data.expiresIn * 1000);\n      const user = new User(data.email, data.idToken, data.localId, expirationDate);\n      return user;\n    }\n\n    getErrorMessage(message) {\n      switch (message) {\n        case 'EMAIL_NOT_FOUND':\n          return 'Email Not Found';\n\n        case 'INVALID_PASSWORD':\n          return 'Invalid Password';\n\n        case 'EMAIL_EXISTS':\n          return 'Email already exists';\n\n        default:\n          return 'Unknown error occurred. Please try again';\n      }\n    }\n\n    setUserInLocalStorage(user) {\n      localStorage.setItem('userData', JSON.stringify(user));\n      this.runTimeoutInterval(user);\n    }\n\n    runTimeoutInterval(user) {\n      const todaysDate = new Date().getTime();\n      const expirationDate = user.expireDate.getTime();\n      const timeInterval = expirationDate - todaysDate;\n      this.timeoutInterval = setTimeout(() => {\n        this.store.dispatch(autoLogout()); //logout functionality or get the refresh token\n      }, timeInterval);\n    }\n\n    getUserFromLocalStorage() {\n      const userDataString = localStorage.getItem('userData');\n\n      if (userDataString) {\n        const userData = JSON.parse(userDataString);\n        const expirationDate = new Date(userData.expirationDate);\n        const user = new User(userData.email, userData.token, userData.localId, expirationDate);\n        this.runTimeoutInterval(user);\n        return user;\n      }\n\n      return null;\n    }\n\n    logout() {\n      localStorage.removeItem('userData');\n\n      if (this.timeoutInterval) {\n        clearTimeout(this.timeoutInterval);\n        this.timeoutInterval = null;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}