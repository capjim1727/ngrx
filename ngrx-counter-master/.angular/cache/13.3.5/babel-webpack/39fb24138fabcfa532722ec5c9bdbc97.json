{"ast":null,"code":"import { exhaustMap, take } from 'rxjs/operators';\nimport { getToken } from './../auth/state/auth.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AuthTokenInterceptor = /*#__PURE__*/(() => {\n  class AuthTokenInterceptor {\n    constructor(store) {\n      this.store = store;\n    }\n\n    intercept(req, next) {\n      return this.store.select(getToken).pipe(take(1), exhaustMap(token => {\n        if (!token) {\n          return next.handle(req);\n        }\n\n        let modifiedReq = req.clone({\n          params: req.params.append('auth', token)\n        });\n        return next.handle(modifiedReq);\n      }));\n    }\n\n  }\n\n  AuthTokenInterceptor.ɵfac = function AuthTokenInterceptor_Factory(t) {\n    return new (t || AuthTokenInterceptor)(i0.ɵɵinject(i1.Store));\n  };\n\n  AuthTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthTokenInterceptor,\n    factory: AuthTokenInterceptor.ɵfac\n  });\n  return AuthTokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}